#pragma once
#include <cstddef>
#include <cstring>
#include <iosfwd>

#include <move/math/common.hpp>
#include <move/math/macros.hpp>
#include <move/math/scalar/base_vec4.hpp>
#if __has_include(<move/meta/type_utils.hpp>)
#define MVM_HAS_MOVE_CORE
#include <move/meta/type_utils.hpp>
#endif

namespace move::math::scalar
{
    // Row major 4x4 matrix
    template <typename T>
    struct base_mat4
    {
    public:
        constexpr static auto acceleration = Acceleration::Scalar;
        constexpr static bool has_fields = true;
        constexpr static bool has_pointer_semantics = has_fields;

        using vec4_t = base_vec4<T>;

        // Member variables
    public:
        union
        {
            struct
            {
                T _11, _12, _13, _14;
                T _21, _22, _23, _24;
                T _31, _32, _33, _34;
                T _41, _42, _43, _44;
            };
            struct
            {
                vec4_t row1, row2, row3, row4;
            };
            T data[16];
        };

        // Constructors
    public:
        // Construct identity matrix by default
        MVM_INLINE base_mat4() :
            row1(1, 0, 0, 0),
            row2(0, 1, 0, 0),
            row3(0, 0, 1, 0),
            row4(0, 0, 0, 1)
        {
        }

        MVM_INLINE base_mat4(const vec4_t& row1,
                             const vec4_t& row2,
                             const vec4_t& row3,
                             const vec4_t& row4) :
            row1(row1), row2(row2), row3(row3), row4(row4)
        {
        }

        MVM_INLINE base_mat4(const base_mat4& rhs)
        {
            std::memcpy(data, rhs.data, sizeof(data));
        }

        MVM_INLINE base_mat4& operator=(const base_mat4& rhs)
        {
            std::memcpy(data, rhs.data, sizeof(data));
            return *this;
        }

        // Arithmetic operators
    public:
        MVM_INLINE_NODISCARD base_mat4 operator+(const base_mat4& rhs) const
        {
            return base_mat4(row1 + rhs.row1, row2 + rhs.row2, row3 + rhs.row3,
                             row4 + rhs.row4);
        }

        MVM_INLINE_NODISCARD base_mat4 operator-(const base_mat4& rhs) const
        {
            return base_mat4(row1 - rhs.row1, row2 - rhs.row2, row3 - rhs.row3,
                             row4 - rhs.row4);
        }

        MVM_INLINE_NODISCARD base_mat4 operator*(const base_mat4& rhs) const
        {
            base_mat4 result;
            for (size_t i = 0; i < 4; ++i)
            {
                for (size_t j = 0; j < 4; ++j)
                {
                    result.data[i * 4 + j] = data[i * 4] * rhs.data[j] +
                                             data[i * 4 + 1] * rhs.data[4 + j] +
                                             data[i * 4 + 2] * rhs.data[8 + j] +
                                             data[i * 4 + 3] * rhs.data[12 + j];
                }
            }
            return result;
        }

        MVM_INLINE_NODISCARD vec4_t operator*(const vec4_t& rhs) const
        {
            return {
                vec4_t::dot(row1, rhs),
                vec4_t::dot(row2, rhs),
                vec4_t::dot(row3, rhs),
                vec4_t::dot(row4, rhs),
            };
        }

        // Stream overload operators for printing
    public:
        template <typename CharT, typename Traits>
        friend std::basic_ostream<CharT, Traits>& operator<<(
            std::basic_ostream<CharT, Traits>& os, const base_mat4& mat)
        {
            os << move::meta::type_name<base_mat4>() << "(" << mat.row1 << ", "
               << mat.row2 << ", " << mat.row3 << ", " << mat.row4 << ")";
            return os;
        }

        // Comparison operators
    public:
        MVM_INLINE_NODISCARD bool operator==(const base_mat4& rhs) const
        {
            return std::memcmp(data, rhs.data, sizeof(data)) == 0;
        }

        MVM_INLINE_NODISCARD bool operator!=(const base_mat4& rhs) const
        {
            return !(*this == rhs);
        }

        // Element access
    public:
        MVM_INLINE_NODISCARD T& operator[](const size_t& index)
        {
            return data[math::min<std::size_t>(index, 15)];
        }

        MVM_INLINE_NODISCARD const T& operator[](const size_t& index) const
        {
            return data[math::min<std::size_t>(index, 15)];
        }

        MVM_INLINE_NODISCARD T& operator()(const size_t& row, const size_t& col)
        {
            return data[math::min<std::size_t>(row, 3) * 4 +
                        math::min<std::size_t>(col, 3)];
        }

        MVM_INLINE_NODISCARD const T& operator()(const size_t& row,
                                                 const size_t& col) const
        {
            return data[math::min<std::size_t>(row, 3) * 4 +
                        math::min<std::size_t>(col, 3)];
        }

        MVM_INLINE_NODISCARD T get_11() const
        {
            return _11;
        }

        MVM_INLINE_NODISCARD T get_12() const
        {
            return _12;
        }

        MVM_INLINE_NODISCARD T get_13() const
        {
            return _13;
        }

        MVM_INLINE_NODISCARD T get_14() const
        {
            return _14;
        }

        MVM_INLINE_NODISCARD T get_21() const
        {
            return _21;
        }

        MVM_INLINE_NODISCARD T get_22() const
        {
            return _22;
        }

        MVM_INLINE_NODISCARD T get_23() const
        {
            return _23;
        }

        MVM_INLINE_NODISCARD T get_24() const
        {
            return _24;
        }

        MVM_INLINE_NODISCARD T get_31() const
        {
            return _31;
        }

        MVM_INLINE_NODISCARD T get_32() const
        {
            return _32;
        }

        MVM_INLINE_NODISCARD T get_33() const
        {
            return _33;
        }

        MVM_INLINE_NODISCARD T get_34() const
        {
            return _34;
        }

        MVM_INLINE_NODISCARD T get_41() const
        {
            return _41;
        }

        MVM_INLINE_NODISCARD T get_42() const
        {
            return _42;
        }

        MVM_INLINE_NODISCARD T get_43() const
        {
            return _43;
        }

        MVM_INLINE_NODISCARD T get_44() const
        {
            return _44;
        }

        // Serialization
    public:
        template <typename Archive>
        void serialize(Archive& archive)
        {
            archive(row1, row2, row3, row4);
        }

        // Mathematical operations
    public:
        MVM_INLINE_NODISCARD base_mat4 transpose() const
        {
            return base_mat4(_11, _21, _31, _41, _12, _22, _32, _42, _13, _23,
                             _33, _43, _14, _24, _34, _44);
        }
    };
}  // namespace move::math::scalar